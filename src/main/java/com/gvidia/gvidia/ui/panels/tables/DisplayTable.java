/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gvidia.gvidia.ui.panels.tables;

import com.gvidia.gvidia.business.base.TableSerializable;
import java.awt.Component;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import com.gvidia.gvidia.ui.Colors;
import com.gvidia.gvidia.ui.panels.IconButton;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Nishay
 */
public class DisplayTable<T extends TableSerializable> extends javax.swing.JPanel {

    List<T> mData;
    
    
    /*
        0 - > left most button or create_btn
        1 -> button in the middle or edit_btn
        2 -> right r delete_btn
    */
    List<ElementButton<T>> mActions;
    String title;
    Colors color;
    ImageIcon[] mImageLabels;

    public DisplayTable(List<T> mData, String title, List<ElementButton<T>> mActions, Colors themeColor) {
        color = themeColor;
        this.mActions = mActions;
       
        this.mData = mData;
        this.title = title;    
        
        mImageLabels = new ImageIcon[mData.size()];
        initComponents();
            
        jLabel1.setText(title);
        setUptable();
        
    }
    
    public IconButton setUpButton(int i) {
        IconButton btn;
        
        if(mActions.get(i) == null) {
            btn = new IconButton("union_32px.png","hey");
            btn.setVisible(false);
        } else {
           btn = new IconButton(mActions.get(i).mIcon, mActions.get(i).mButtonText);
           btn.setColors(color.PRIMARY_DARK(), color.BACKGROUND);
        }
        return btn;
        
    }
    
    private void setUpButton(JLabel icon, JLabel textLabel, ElementButton<T> button) {
        textLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        textLabel.setForeground(new java.awt.Color(255, 255, 255));
        textLabel.setText(button.getmButtonText());
        icon.setIcon(button.getmIcon());
    }
    
    
    

    
    
    
    
    
    
    /**
     * Creates new form DisplayTable
     */
    //TODO Add Table and Stuff
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iconButton1 = setUpButton(0);
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        iconButton3 = setUpButton(2);
        iconButton2 = setUpButton(1);

        setBackground(color.BACKGROUND);
        setMaximumSize(new java.awt.Dimension(650, 600));
        setMinimumSize(new java.awt.Dimension(650, 600));

        iconButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                iconButton1MousePressed(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBackground(color.BACKGROUND);
        jTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jTable1.setForeground(color.SECONDARY());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setIntercellSpacing(new java.awt.Dimension(0, 5));
        jTable1.setSelectionBackground(color.SECONDARY());
        jTable1.setSelectionForeground(color.BACKGROUND);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setBackground(color.BACKGROUND);
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(color.PRIMARY_DARK());
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Title");

        iconButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                iconButton3MousePressed(evt);
            }
        });

        iconButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                iconButton2MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iconButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(iconButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(iconButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(iconButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(iconButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(iconButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void iconButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconButton1MousePressed
        // TODO add your handling code here:
        T t = getSelectedItem();
        System.out.println(t);
        if(mActions.get(0) != null) {
            mActions.get(0).getmAction().action(t);
        }
    }//GEN-LAST:event_iconButton1MousePressed

    private void iconButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconButton3MousePressed
        // TODO add your handling code here:
        T t = getSelectedItem();
        System.out.println(t);
        if(mActions.get(2) != null) {
            mActions.get(2).getmAction().action(t);
        }
    }//GEN-LAST:event_iconButton3MousePressed

    private void iconButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconButton2MousePressed
        // TODO add your handling code here:
        T t = getSelectedItem();
        System.out.println(t);
        if(mActions.get(1) != null) {
            mActions.get(1).getmAction().action(t);
        }
    }//GEN-LAST:event_iconButton2MousePressed

    
    public T getSelectedItem() {
        
        int idx =  jTable1.getSelectedRow();
        T item;
        
        if(mData.size() <= idx || idx == -1) {
            return null;
        }
        item = mData.get(idx);
        return item;
    }
    
    public void setUptable() {
        
        jTable1.setDefaultRenderer(Icon.class, new DefaultTableCellRenderer(){
            
            
            
            @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row,column);


            if(mImageLabels[row] == null) {
                mImageLabels[row] = mData.get(row).getImageIcon();
                System.out.println("Created");
            }
            System.out.println("Render");
            this.setText("");
            this.setIcon(mImageLabels[row]);
            return this;
            
        }
        
        });
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            
            
            
            @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {
            
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if(value == null) 
                value = new String("N/A");
            
            this.setText(value.toString());
            this.setHorizontalTextPosition(JLabel.CENTER);
            return this;
            
        }
        
        });
        
        jTable1.setModel(new TableModel(mData));
        jTable1.setRowHeight(60);
        jTable1.setBackground(color.BACKGROUND);
        jTable1.setForeground(color.PRIMARY_DARK());
        jTable1.setSelectionBackground(color.PRIMARY_DARK());
        jTable1.setSelectionForeground(color.BACKGROUND);


        
    }

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.gvidia.gvidia.ui.panels.IconButton iconButton1;
    private com.gvidia.gvidia.ui.panels.IconButton iconButton2;
    private com.gvidia.gvidia.ui.panels.IconButton iconButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    class TableModel<Y extends TableSerializable> extends AbstractTableModel {

        List<Y> mData;

        public TableModel(List<Y> mData) {
            this.mData = mData;
        }
      
        @Override
        public int getRowCount() {
            return mData.size();
        }

        @Override
        public int getColumnCount() {
            if(mData.size() == 0)
                return 0;
            
            return mData.get(0).columns().length;
        }
        
        public String getColumnName(int col) {
            return mData.get(0).columns()[col];
        }   
        @Override
        public Class<?> getColumnClass(int col) {
            if(getColumnName(col).equals("Image"))
                return Icon.class;
            else return Object.class;
        }
        
            
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
           return mData.get(rowIndex).row()[columnIndex]; //To change body of generated methods, choose Tools | Templates.
        }
        
    }
    
    
    
    class CellRenderer extends DefaultTableCellRenderer{
        
        
        
        
        
        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {
            System.out.println("Object is"+ value);
         
//            try {
//                
//                System.out.println("Called to Render");
//                JLabel imageLabel = mData.get(row).getImage();
//                super.getTableCellRendererComponent(table,imageLabel , isSelected, hasFocus, row, column);
// 
//                this.setIcon(imageLabel.getIcon());
//                this.setSize(imageLabel.getSize());
//                if(value != null) {
//                    TableColumn tb = table.getColumn(table.getColumnName(column));
//                    tb.setMaxWidth(90);
//                    tb.setMinWidth(90);
//                    table.setRowHeight(60);
//                }
//                return this;
//            } catch(Exception e) {
//                e.printStackTrace();
//            }
            return (Component) value;
        }
        
        

        
 
    }

}
